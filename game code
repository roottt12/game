<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    canvas {
      background: #000;
      display: block;
      margin: 0 auto;
      touch-action: none;
    }
  </style>
</head>
<body>
<canvas id="gameCanvas" width="400" height="600" tabindex="0"></canvas>

<script>
const canvas = document.getElementById('gameCanvas');
canvas.focus();
const ctx = canvas.getContext('2d');

let ball = {
  x: 200,
  y: 300,
  radius: 10,
  dx: 1,
  dy: -1.5
};

let paddle = {
  width: 80,
  height: 10,
  x: 160,
  y: canvas.height - 30
};

const brickRowCount = 3;
const brickColumnCount = 5;
const brickWidth = 70;
const brickHeight = 20;
const brickPadding = 10;
const brickOffsetTop = 30;
const brickOffsetLeft = 25;

let bricks = [];
let gameOver = false;
let rightPressed = false;
let leftPressed = false;

function initBricks() {
  bricks = [];
  for(let c = 0; c < brickColumnCount; c++) {
    bricks[c] = [];
    for(let r = 0; r < brickRowCount; r++) {
      bricks[c][r] = { x: 0, y: 0, status: 1 };
    }
  }
}
initBricks();

canvas.addEventListener("touchmove", function(e) {
  const touchX = e.touches[0].clientX - canvas.getBoundingClientRect().left;
  paddle.x = touchX - paddle.width / 2;
  if (paddle.x < 0) paddle.x = 0;
  if (paddle.x + paddle.width > canvas.width) paddle.x = canvas.width - paddle.width;
});

document.addEventListener("keydown", function(e) {
  if (e.key === "ArrowRight") rightPressed = true;
  else if (e.key === "ArrowLeft") leftPressed = true;
});

document.addEventListener("keyup", function(e) {
  if (e.key === "ArrowRight") rightPressed = false;
  else if (e.key === "ArrowLeft") leftPressed = false;
});

function drawBall() {
  ctx.beginPath();
  ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
  ctx.fillStyle = "blue";
  ctx.fill();
  ctx.closePath();
}

function drawPaddle() {
  ctx.beginPath();
  ctx.rect(paddle.x, paddle.y, paddle.width, paddle.height);
  ctx.fillStyle = "white";
  ctx.fill();
  ctx.closePath();
}

function drawBricks() {
  for(let c = 0; c < brickColumnCount; c++) {
    for(let r = 0; r < brickRowCount; r++) {
      if (bricks[c][r].status === 1) {
        let brickX = c * (brickWidth + brickPadding) + brickOffsetLeft;
        let brickY = r * (brickHeight + brickPadding) + brickOffsetTop;
        bricks[c][r].x = brickX;
        bricks[c][r].y = brickY;
        ctx.beginPath();
        ctx.rect(brickX, brickY, brickWidth, brickHeight);
        ctx.fillStyle = "orange";
        ctx.fill();
        ctx.closePath();
      }
    }
  }
}

function drawGameOverMessage() {
  ctx.font = "30px Arial";
  ctx.fillStyle = "red";
  ctx.textAlign = "center";
  ctx.fillText("Game Over!", canvas.width / 2, canvas.height / 2);
}

function collisionDetection() {
  let remainingBricks = 0;
  for(let c = 0; c < brickColumnCount; c++) {
    for(let r = 0; r < brickRowCount; r++) {
      let b = bricks[c][r];
      if (b.status === 1) {
        remainingBricks++;
        if (
          ball.x > b.x && ball.x < b.x + brickWidth &&
          ball.y > b.y && ball.y < b.y + brickHeight
        ) {
          ball.dy = -ball.dy;
          b.status = 0;
        }
      }
    }
  }
  if (remainingBricks === 0) {
    gameOver = true;
  }
}

function resetBallAndPaddle() {
  ball.x = canvas.width / 2;
  ball.y = canvas.height - 60;
  ball.dx = 1;
  ball.dy = -1.5;
  paddle.x = (canvas.width - paddle.width) / 2;
}

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  drawBricks();
  drawBall();
  drawPaddle();
  collisionDetection();

  if (gameOver) {
    drawGameOverMessage();
    return;
  }

  if (rightPressed) {
    paddle.x += 3;
    if (paddle.x + paddle.width > canvas.width) paddle.x = canvas.width - paddle.width;
  } else if (leftPressed) {
    paddle.x -= 3;
    if (paddle.x < 0) paddle.x = 0;
  }

  ball.x += ball.dx;
  ball.y += ball.dy;

  if (ball.x + ball.radius > canvas.width || ball.x - ball.radius < 0) {
    ball.dx = -ball.dx;
  }
  if (ball.y - ball.radius < 0) {
    ball.dy = -ball.dy;
  }

  if (
    ball.y + ball.radius >= paddle.y &&
    ball.x >= paddle.x &&
    ball.x <= paddle.x + paddle.width
  ) {
    ball.dy = -ball.dy;
    ball.y = paddle.y - ball.radius;
  }

  if (ball.y + ball.radius > canvas.height) {
    initBricks();
    resetBallAndPaddle();
  }

  requestAnimationFrame(draw);
}

draw();
</script>
</body>
</html>
